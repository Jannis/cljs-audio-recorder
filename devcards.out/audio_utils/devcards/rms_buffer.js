// Compiled by ClojureScript 1.7.228 {}
goog.provide('audio_utils.devcards.rms_buffer');
goog.require('cljs.core');
goog.require('devcards.core');
goog.require('audio_utils.rms_buffer');
goog.require('audio_utils.viz');
audio_utils.devcards.rms_buffer.run_rms = (function audio_utils$devcards$rms_buffer$run_rms(rms_size,samples){
return cljs.core.reduce.call(null,(function (p__24053,sample){
var map__24054 = p__24053;
var map__24054__$1 = ((((!((map__24054 == null)))?((((map__24054.cljs$lang$protocol_mask$partition0$ & (64))) || (map__24054.cljs$core$ISeq$))?true:false):false))?cljs.core.apply.call(null,cljs.core.hash_map,map__24054):map__24054);
var rms_buf = cljs.core.get.call(null,map__24054__$1,new cljs.core.Keyword(null,"rms-buf","rms-buf",273078108));
var rms_values = cljs.core.get.call(null,map__24054__$1,new cljs.core.Keyword(null,"rms-values","rms-values",-170802699));
var rms_samples = cljs.core.get.call(null,map__24054__$1,new cljs.core.Keyword(null,"rms-samples","rms-samples",1951056061));
var next_buf = audio_utils.rms_buffer.rms_push.call(null,rms_buf,sample);
var next_val = audio_utils.rms_buffer.rms.call(null,rms_buf);
return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"rms-buf","rms-buf",273078108),next_buf,new cljs.core.Keyword(null,"rms-values","rms-values",-170802699),cljs.core.conj.call(null,rms_values,next_val),new cljs.core.Keyword(null,"rms-samples","rms-samples",1951056061),cljs.core.conj.call(null,rms_samples,cljs.core.into.call(null,cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(null,"samples","samples",635504833).cljs$core$IFn$_invoke$arity$1(next_buf)))], null);
}),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"rms-buf","rms-buf",273078108),audio_utils.rms_buffer.rms_buffer.call(null,rms_size),new cljs.core.Keyword(null,"rms-values","rms-values",-170802699),cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(null,"rms-samples","rms-samples",1951056061),cljs.core.PersistentVector.EMPTY], null),samples);
});
audio_utils.devcards.rms_buffer.compute_rms_values = (function audio_utils$devcards$rms_buffer$compute_rms_values(rms_size,samples){
return new cljs.core.Keyword(null,"rms-values","rms-values",-170802699).cljs$core$IFn$_invoke$arity$1(audio_utils.devcards.rms_buffer.run_rms.call(null,rms_size,samples));
});
audio_utils.devcards.rms_buffer.compute_rms_samples = (function audio_utils$devcards$rms_buffer$compute_rms_samples(rms_size,samples){
return new cljs.core.Keyword(null,"rms-samples","rms-samples",1951056061).cljs$core$IFn$_invoke$arity$1(audio_utils.devcards.rms_buffer.run_rms.call(null,rms_size,samples));
});
devcards.core.register_card.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"path","path",-188191168),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"audio_utils.devcards.rms_buffer","audio_utils.devcards.rms_buffer",-1743231301),new cljs.core.Keyword(null,"card","card",-1430355152)], null),new cljs.core.Keyword(null,"func","func",-238706040),(function (){
return devcards.core.card_base.call(null,new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),"card",new cljs.core.Keyword(null,"documentation","documentation",1889593999),"500 zeros along with RMS values calculated after adding each\n   individual sample to an RMS buffer with size 100. Since the\n   input consists entirely of zeros, all RMS values are 0.0.",new cljs.core.Keyword(null,"main-obj","main-obj",-1544409742),(function (){var data = cljs.core.repeat.call(null,(500),0.0);
var rms_values = audio_utils.devcards.rms_buffer.compute_rms_values.call(null,(100),data);
return audio_utils.viz.plot_buffers.call(null,(500),(100),"Input",data,"RMS Values",rms_values);
})(),new cljs.core.Keyword(null,"initial-data","initial-data",-1315709804),null,new cljs.core.Keyword(null,"options","options",99638489),cljs.core.merge.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"heading","heading",-1312171873),false], null),devcards.core.assert_options_map.call(null,null))], null));
})], null));
devcards.core.register_card.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"path","path",-188191168),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"audio_utils.devcards.rms_buffer","audio_utils.devcards.rms_buffer",-1743231301),new cljs.core.Keyword(null,"card","card",-1430355152)], null),new cljs.core.Keyword(null,"func","func",-238706040),(function (){
return devcards.core.card_base.call(null,new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),"card",new cljs.core.Keyword(null,"documentation","documentation",1889593999),"500 -1.0s along with RMS values calculated after adding each\n   individual sample to an RMS buffer with size 100. Since the\n   input is constantly max-ed out at 0dB (-1.0 or 1.0), the\n   RMS values are all 1.0.",new cljs.core.Keyword(null,"main-obj","main-obj",-1544409742),(function (){var data = cljs.core.repeat.call(null,(500),-1.0);
var rms_values = audio_utils.devcards.rms_buffer.compute_rms_values.call(null,(100),data);
return audio_utils.viz.plot_buffers.call(null,(500),(100),"Input",data,"RMS Values",rms_values);
})(),new cljs.core.Keyword(null,"initial-data","initial-data",-1315709804),null,new cljs.core.Keyword(null,"options","options",99638489),cljs.core.merge.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"heading","heading",-1312171873),false], null),devcards.core.assert_options_map.call(null,null))], null));
})], null));
devcards.core.register_card.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"path","path",-188191168),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"audio_utils.devcards.rms_buffer","audio_utils.devcards.rms_buffer",-1743231301),new cljs.core.Keyword(null,"card","card",-1430355152)], null),new cljs.core.Keyword(null,"func","func",-238706040),(function (){
return devcards.core.card_base.call(null,new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),"card",new cljs.core.Keyword(null,"documentation","documentation",1889593999),"250 -1.0s and 250 1.0s along with RMS values calculated after\n   adding each individual sample to an RMS buffer with size 100.\n   Since the input is constantly max-ed out at 0dB (-1.0 or 1.0),\n   the RMS values are all 1.0.",new cljs.core.Keyword(null,"main-obj","main-obj",-1544409742),(function (){var data = cljs.core.concat.call(null,cljs.core.repeat.call(null,(250),-1.0),cljs.core.repeat.call(null,(250),1.0));
var rms_values = audio_utils.devcards.rms_buffer.compute_rms_values.call(null,(100),data);
return audio_utils.viz.plot_buffers.call(null,(500),(100),"Input",data,"RMS Values",rms_values);
})(),new cljs.core.Keyword(null,"initial-data","initial-data",-1315709804),null,new cljs.core.Keyword(null,"options","options",99638489),cljs.core.merge.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"heading","heading",-1312171873),false], null),devcards.core.assert_options_map.call(null,null))], null));
})], null));
devcards.core.register_card.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"path","path",-188191168),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"audio_utils.devcards.rms_buffer","audio_utils.devcards.rms_buffer",-1743231301),new cljs.core.Keyword(null,"card","card",-1430355152)], null),new cljs.core.Keyword(null,"func","func",-238706040),(function (){
return devcards.core.card_base.call(null,new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),"card",new cljs.core.Keyword(null,"documentation","documentation",1889593999),"500 0.0s and 500 1.0s along with RMS values calculated after\n   adding each individual sample to an RMS buffer with size 100.\n   It takes exactly 100 samples with the value 1.0 until the RMS\n   value also reaches 1.0.\n   ",new cljs.core.Keyword(null,"main-obj","main-obj",-1544409742),(function (){var data = cljs.core.concat.call(null,cljs.core.repeat.call(null,(500),0.0),cljs.core.repeat.call(null,(500),1.0));
var rms_values = audio_utils.devcards.rms_buffer.compute_rms_values.call(null,(100),data);
return audio_utils.viz.plot_buffers.call(null,(1000),(250),"Input",data,"RMS Values",rms_values);
})(),new cljs.core.Keyword(null,"initial-data","initial-data",-1315709804),null,new cljs.core.Keyword(null,"options","options",99638489),cljs.core.merge.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"heading","heading",-1312171873),false], null),devcards.core.assert_options_map.call(null,null))], null));
})], null));
devcards.core.register_card.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"path","path",-188191168),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"audio_utils.devcards.rms_buffer","audio_utils.devcards.rms_buffer",-1743231301),new cljs.core.Keyword(null,"card","card",-1430355152)], null),new cljs.core.Keyword(null,"func","func",-238706040),(function (){
return devcards.core.card_base.call(null,new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),"card",new cljs.core.Keyword(null,"documentation","documentation",1889593999),"500 0.0s and 500 1.0s along with RMS values calculated after\n   adding each individual sample to an RMS buffer with size 250.\n   It takes exactly 250 samples with the value 1.0 until the RMS\n   value also reaches 1.0.",new cljs.core.Keyword(null,"main-obj","main-obj",-1544409742),(function (){var data = cljs.core.concat.call(null,cljs.core.repeat.call(null,(500),0.0),cljs.core.repeat.call(null,(500),1.0));
var rms_values = audio_utils.devcards.rms_buffer.compute_rms_values.call(null,(250),data);
return audio_utils.viz.plot_buffers.call(null,(1000),(250),"Input",data,"RMS Values",rms_values);
})(),new cljs.core.Keyword(null,"initial-data","initial-data",-1315709804),null,new cljs.core.Keyword(null,"options","options",99638489),cljs.core.merge.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"heading","heading",-1312171873),false], null),devcards.core.assert_options_map.call(null,null))], null));
})], null));
devcards.core.register_card.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"path","path",-188191168),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"audio_utils.devcards.rms_buffer","audio_utils.devcards.rms_buffer",-1743231301),new cljs.core.Keyword(null,"card","card",-1430355152)], null),new cljs.core.Keyword(null,"func","func",-238706040),(function (){
return devcards.core.card_base.call(null,new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),"card",new cljs.core.Keyword(null,"documentation","documentation",1889593999),"500 zeros, 250 ones and 500 zeros along with RMS values\n   calculated after adding each individual sample to an RMS\n   buffer with size 250. It takes exactly 250 1.0s until the\n   RMS value also reaches 1.0. It then takes another 250\n   0.0s until the RMS value is back at 0.0.",new cljs.core.Keyword(null,"main-obj","main-obj",-1544409742),(function (){var data = cljs.core.concat.call(null,cljs.core.repeat.call(null,(500),0.0),cljs.core.repeat.call(null,(250),1.0),cljs.core.repeat.call(null,(500),0.0));
var rms_values = audio_utils.devcards.rms_buffer.compute_rms_values.call(null,(250),data);
return audio_utils.viz.plot_buffers.call(null,(1250),(250),"Input",data,"RMS Values",rms_values);
})(),new cljs.core.Keyword(null,"initial-data","initial-data",-1315709804),null,new cljs.core.Keyword(null,"options","options",99638489),cljs.core.merge.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"heading","heading",-1312171873),false], null),devcards.core.assert_options_map.call(null,null))], null));
})], null));
devcards.core.register_card.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"path","path",-188191168),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"audio_utils.devcards.rms_buffer","audio_utils.devcards.rms_buffer",-1743231301),new cljs.core.Keyword(null,"card","card",-1430355152)], null),new cljs.core.Keyword(null,"func","func",-238706040),(function (){
return devcards.core.card_base.call(null,new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),"card",new cljs.core.Keyword(null,"documentation","documentation",1889593999),"500 zeros, 250 -1.0s and 500 zeros along with RMS values\n   calculated after adding each individual sample to an RMS\n   buffer with size 250. The RMS values are exactly the same\n   as with 1.0s instead of -1.0s.",new cljs.core.Keyword(null,"main-obj","main-obj",-1544409742),(function (){var data = cljs.core.concat.call(null,cljs.core.repeat.call(null,(500),0.0),cljs.core.repeat.call(null,(250),-1.0),cljs.core.repeat.call(null,(500),0.0));
var rms_values = audio_utils.devcards.rms_buffer.compute_rms_values.call(null,(250),data);
return audio_utils.viz.plot_buffers.call(null,(1250),(250),"Input",data,"RMS Values",rms_values);
})(),new cljs.core.Keyword(null,"initial-data","initial-data",-1315709804),null,new cljs.core.Keyword(null,"options","options",99638489),cljs.core.merge.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"heading","heading",-1312171873),false], null),devcards.core.assert_options_map.call(null,null))], null));
})], null));
devcards.core.register_card.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"path","path",-188191168),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"audio_utils.devcards.rms_buffer","audio_utils.devcards.rms_buffer",-1743231301),new cljs.core.Keyword(null,"card","card",-1430355152)], null),new cljs.core.Keyword(null,"func","func",-238706040),(function (){
return devcards.core.card_base.call(null,new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),"card",new cljs.core.Keyword(null,"documentation","documentation",1889593999),"500 zeros, 100 1.0s and 1400 zeros along with RMS values\n   calculated after adding each individual sample to an RMS\n   buffer with a window size of 1000 samples.\n\n   Starting with the 1.0s, the RMS value quickly rises but\n   never reaches 1.0s due to the large RMS buffer window size.\n   After the 1.0s it slowly decreases again until the RMS buffer\n   is full. From this point, the ratio of 0.0s to 1.0s in the RMS\n   window remains the same (resulting in a constant RMS value)\n   until the RMS window slides out of the 100 1.0s, resulting in\n   a decrease down to an RMS value of 0.0. This final decrease\n   takes exactly 100 samples (corresponding to the 1.0s).",new cljs.core.Keyword(null,"main-obj","main-obj",-1544409742),(function (){var data = cljs.core.concat.call(null,cljs.core.repeat.call(null,(500),0.0),cljs.core.repeat.call(null,(100),1.0),cljs.core.repeat.call(null,(1400),0.0));
var rms_values = audio_utils.devcards.rms_buffer.compute_rms_values.call(null,(1000),data);
var rms_samples = cljs.core.map.call(null,cljs.core.comp.call(null,((function (data,rms_values){
return (function (p1__24127_SHARP_){
return (p1__24127_SHARP_ / (1000));
});})(data,rms_values))
,cljs.core.count),audio_utils.devcards.rms_buffer.compute_rms_samples.call(null,(1000),data));
return audio_utils.viz.plot_buffers.call(null,(2000),(250),"Input",data,"RMS Values",rms_values,"RMS Buffer Fill %",rms_samples);
})(),new cljs.core.Keyword(null,"initial-data","initial-data",-1315709804),null,new cljs.core.Keyword(null,"options","options",99638489),cljs.core.merge.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"heading","heading",-1312171873),false], null),devcards.core.assert_options_map.call(null,null))], null));
})], null));
devcards.core.register_card.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"path","path",-188191168),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"audio_utils.devcards.rms_buffer","audio_utils.devcards.rms_buffer",-1743231301),new cljs.core.Keyword(null,"card","card",-1430355152)], null),new cljs.core.Keyword(null,"func","func",-238706040),(function (){
return devcards.core.card_base.call(null,new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),"card",new cljs.core.Keyword(null,"documentation","documentation",1889593999),"500 samples of a 10Hz sine wave at a sample rate of 1000, with\n   an RMS window size of 25 samples. The plot compares the input\n   signal with calculated RMS volume after every sample.",new cljs.core.Keyword(null,"main-obj","main-obj",-1544409742),(function (){var data = audio_utils.viz.sine_wave.call(null,(10),(1000),(500));
var rms_values = audio_utils.devcards.rms_buffer.compute_rms_values.call(null,(25),data);
var rms_samples = cljs.core.map.call(null,cljs.core.comp.call(null,((function (data,rms_values){
return (function (p1__24129_SHARP_){
return (p1__24129_SHARP_ / (25));
});})(data,rms_values))
,cljs.core.count),audio_utils.devcards.rms_buffer.compute_rms_samples.call(null,(25),data));
return audio_utils.viz.plot_buffers.call(null,(500),(250),"Input",data,"RMS Values",rms_values,"RMS Buffer Fill %",rms_samples);
})(),new cljs.core.Keyword(null,"initial-data","initial-data",-1315709804),null,new cljs.core.Keyword(null,"options","options",99638489),cljs.core.merge.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"heading","heading",-1312171873),false], null),devcards.core.assert_options_map.call(null,null))], null));
})], null));

//# sourceMappingURL=rms_buffer.js.map
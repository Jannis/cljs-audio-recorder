;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name audio-utils.chunker, :imports nil, :requires {w audio-utils.worker, audio-utils.worker audio-utils.worker}, :uses nil, :defs {IChunker {:meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/Work/vimsical/cljs-audio-utils/eue/-rcsl8f/audio_utils/chunker.cljs", :line 4, :column 14, :end-line 4, :end-column 22, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {process-samples [[this samples]], deliver-chunks [[this]], reset-chunks [[this n-channels]]}}}, :protocol-symbol true, :name audio-utils.chunker/IChunker, :file "/home/jannis/.boot/cache/tmp/home/jannis/Work/vimsical/cljs-audio-utils/eue/-rcsl8f/audio_utils/chunker.cljs", :end-column 22, :column 1, :line 4, :protocol-info {:methods {process-samples [[this samples]], deliver-chunks [[this]], reset-chunks [[this n-channels]]}}, :info nil, :end-line 4, :impls #{audio-utils.chunker/Chunker}, :doc nil, :jsdoc ("@interface")}, process-samples {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/Work/vimsical/cljs-audio-utils/eue/-rcsl8f/audio_utils/chunker.cljs", :line 5, :column 4, :end-line 5, :end-column 19, :protocol audio-utils.chunker/IChunker, :doc nil, :arglists (quote ([this samples]))}, :protocol audio-utils.chunker/IChunker, :name audio-utils.chunker/process-samples, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/Work/vimsical/cljs-audio-utils/eue/-rcsl8f/audio_utils/chunker.cljs", :end-column 19, :method-params ([this samples]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4, :end-line 5, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this samples])), :doc nil}, deliver-chunks {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/Work/vimsical/cljs-audio-utils/eue/-rcsl8f/audio_utils/chunker.cljs", :line 6, :column 4, :end-line 6, :end-column 18, :protocol audio-utils.chunker/IChunker, :doc nil, :arglists (quote ([this]))}, :protocol audio-utils.chunker/IChunker, :name audio-utils.chunker/deliver-chunks, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/Work/vimsical/cljs-audio-utils/eue/-rcsl8f/audio_utils/chunker.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, reset-chunks {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/Work/vimsical/cljs-audio-utils/eue/-rcsl8f/audio_utils/chunker.cljs", :line 7, :column 4, :end-line 7, :end-column 16, :protocol audio-utils.chunker/IChunker, :doc nil, :arglists (quote ([this n-channels]))}, :protocol audio-utils.chunker/IChunker, :name audio-utils.chunker/reset-chunks, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/Work/vimsical/cljs-audio-utils/eue/-rcsl8f/audio_utils/chunker.cljs", :end-column 16, :method-params ([this n-channels]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4, :end-line 7, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this n-channels])), :doc nil}, Chunker {:num-fields 3, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection audio-utils.worker/IWorkerAudioNode audio-utils.chunker/IChunker cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name audio-utils.chunker/Chunker, :file "/home/jannis/.boot/cache/tmp/home/jannis/Work/vimsical/cljs-audio-utils/eue/-rcsl8f/audio_utils/chunker.cljs", :end-column 19, :type true, :column 12, :internal-ctor true, :line 9, :record true, :end-line 9, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->Chunker {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/Work/vimsical/cljs-audio-utils/eue/-rcsl8f/audio_utils/chunker.cljs", :line 9, :column 12, :end-line 9, :end-column 19, :internal-ctor true, :factory :positional, :arglists (quote ([samples-per-chunk next chunks]))}, :name audio-utils.chunker/->Chunker, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/Work/vimsical/cljs-audio-utils/eue/-rcsl8f/audio_utils/chunker.cljs", :end-column 19, :method-params ([samples-per-chunk next chunks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 9, :end-line 9, :max-fixed-arity 3, :fn-var true, :arglists (quote ([samples-per-chunk next chunks]))}, map->Chunker {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/Work/vimsical/cljs-audio-utils/eue/-rcsl8f/audio_utils/chunker.cljs", :line 9, :column 12, :end-line 9, :end-column 19, :internal-ctor true, :factory :map, :arglists (quote ([G__7902]))}, :name audio-utils.chunker/map->Chunker, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/Work/vimsical/cljs-audio-utils/eue/-rcsl8f/audio_utils/chunker.cljs", :end-column 19, :method-params ([G__7902]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 9, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__7902]))}, chunker {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/Work/vimsical/cljs-audio-utils/eue/-rcsl8f/audio_utils/chunker.cljs", :line 40, :column 7, :end-line 40, :end-column 14, :arglists (quote ([{:keys [samples-per-chunk], :or {samples-per-chunk 4410}}]))}, :name audio-utils.chunker/chunker, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/Work/vimsical/cljs-audio-utils/eue/-rcsl8f/audio_utils/chunker.cljs", :end-column 14, :method-params ([p__8060]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [samples-per-chunk], :or {samples-per-chunk 4410}}]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{samples-per-chunk :chunks :next chunks next :samples-per-chunk}, :order [:samples-per-chunk :next :chunks samples-per-chunk next chunks]}, :doc nil}